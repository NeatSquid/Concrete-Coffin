//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/StarterAssets/InputSystem/ExtraInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ExtraInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ExtraInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ExtraInputs"",
    ""maps"": [
        {
            ""name"": ""Extra Input Map"",
            ""id"": ""66c3ee4a-7b72-4007-9e38-cd1927c21d8d"",
            ""actions"": [
                {
                    ""name"": ""Grab"",
                    ""type"": ""Button"",
                    ""id"": ""f525f887-2584-4e94-85fa-fde2e48c661a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""86c4d39c-f7a8-49e3-9732-55c38813b841"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3fb17c66-e53b-41a8-a463-3478bc6160fc"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b73a5808-c983-4ad4-988e-591a93ed32d6"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Extra Input Map
        m_ExtraInputMap = asset.FindActionMap("Extra Input Map", throwIfNotFound: true);
        m_ExtraInputMap_Grab = m_ExtraInputMap.FindAction("Grab", throwIfNotFound: true);
        m_ExtraInputMap_Interact = m_ExtraInputMap.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Extra Input Map
    private readonly InputActionMap m_ExtraInputMap;
    private IExtraInputMapActions m_ExtraInputMapActionsCallbackInterface;
    private readonly InputAction m_ExtraInputMap_Grab;
    private readonly InputAction m_ExtraInputMap_Interact;
    public struct ExtraInputMapActions
    {
        private @ExtraInputs m_Wrapper;
        public ExtraInputMapActions(@ExtraInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Grab => m_Wrapper.m_ExtraInputMap_Grab;
        public InputAction @Interact => m_Wrapper.m_ExtraInputMap_Interact;
        public InputActionMap Get() { return m_Wrapper.m_ExtraInputMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ExtraInputMapActions set) { return set.Get(); }
        public void SetCallbacks(IExtraInputMapActions instance)
        {
            if (m_Wrapper.m_ExtraInputMapActionsCallbackInterface != null)
            {
                @Grab.started -= m_Wrapper.m_ExtraInputMapActionsCallbackInterface.OnGrab;
                @Grab.performed -= m_Wrapper.m_ExtraInputMapActionsCallbackInterface.OnGrab;
                @Grab.canceled -= m_Wrapper.m_ExtraInputMapActionsCallbackInterface.OnGrab;
                @Interact.started -= m_Wrapper.m_ExtraInputMapActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_ExtraInputMapActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_ExtraInputMapActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_ExtraInputMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Grab.started += instance.OnGrab;
                @Grab.performed += instance.OnGrab;
                @Grab.canceled += instance.OnGrab;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public ExtraInputMapActions @ExtraInputMap => new ExtraInputMapActions(this);
    public interface IExtraInputMapActions
    {
        void OnGrab(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
